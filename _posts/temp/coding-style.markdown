---
layout: post
title: "챕터1.코딩스타일 챕터2.최적화된 장고 환경 꾸미기"
date: 2017-01-01 14:19:51 +0900
categories: 모범사례로 배우는 Django(장고)테크닉
---
모범사례로 배우는 Django(장고)테크닉 1장, 2장 정리

## 코딩스타일

### 읽기 쉬운 코드를 만드는 것이 왜 중요한가
1. 축약적이거나 함축적인 변수명은 피한다.
2. 함수 인자의 이름들은 꼭 써준다.
3. 클래스와 메서드를 문서화 한다.
4. 코드에 주석은 꼭 달도록 한다.
5. 재사용 가능한 함수 또는 메서드 안에서 반복되는 코드들은 리펙터링을 해둔다.
6. 함수와 메서드는 가능한 한 작은 크기를 유지한다. 어림잡아 스크롤 없이 읽을 수 있는 길이가 적합하다.

### PEP8
파이썬 공식 스타일 가이드. 코딩관례를 보고 꼭 숙지 또는 제약 유틸 사용. 다음과 같은 내용이 있음.
+ 들여쓰기에는 스페이스 네 칸을 이용한다.
+ 최상위 함수와 클래스선언 사이를 구분짓기 위해 두줄을 띄운다.
+ 클래스 안에서 메서드들을 나누기 위해 한줄을 띄운다.
+ 한줄당 텍스트는 79글자를 넘어서는 안된다.(최근 지키지 않은 프로젝트들도 속속들이 나오고 있다.)
+ 표준 라이브러리, 연관 외부 라이브러리, 로컬 애플리케이션 또는 라이브러리에 한정된 임포트 순서로 그룹을 지어 임포트 한다.

### 장고 프로젝트의 임포트 순서
1. 표준 라이브러리 임포드
2. 코어 장고 임포트
3. 장고와 무관한 외부 앱 임포트
4. 프로젝트 앱 임포트

### 명시적 성격의 상대 임포트(explicit relative import) 이용하기
하드코딩된 절대 임포트는 구조적으로 종속된 모듈을 어렵에 분리하게 함. 장고 또한 파이썬의 한 패키지 임으로 당연히 명시적 성격의 상대 임포트를 할 수 있음.

| 코드                              | 임포트 타입 | 용도 |
| -------------------------------- | --------- | --- |
| from core.views import FoodMixin | 절대 임포트 | 외부에서 임포트해서 현재 앱에서 이용할때 |
|from .models import WaffleCone    | 명시적 상태 | 다른 모듈에서 임포트해서 현재 앱에서 이용할때 |
|from models import WaffleCone     | 암묵적 상태 | 종종 다른 모듈에서 임포트해서 현재 앱에서 이용할 때 쓰지만 좋은 방법은 아님 |

```python
from __future__ import absolute_import  # 이용하자
```

### import * 은 피하자
파이썬 모듈의 이름 공간들이 현재 우리가 작업하는 모듈의 이름 공간에 추가로 로딩되거나 기존 것 위에 덮여 로딩되는 일을 막기 위해서.

### 장고 코딩 스타일
#### http://2scoops.co/1.8-coding-style  # 장고만의 스타일 가이드라인
#### URL패턴(웹의 URL주소가 아님) 이름에는 대시 대신 밑줄 을 이용한다
```python
patterns = [
    url(regex='^add/$',
        view=views.add_topping,
        name='add_topping'
    )
]
```
#### 템플릿 블록 이름에 대시 대신 밑줄을 이용한다.
### 통합개발환경이나 텍스트 편집기에 종속되는 스타일의 코딩은 지양한다

## 최적화된 장고 환경 꾸미기
사실 정리할 내용이 거의 없음
### 같은 데이터베이스를 이용하라
개발환경과 운영환경에서 같은 데이터베이스를 이용하라는 당연한 내용.
최고의 조합 = 장고 + PostgreSQL  # 이유는 자세기 기술되어 있지 않음
### pip와 virtualenv이용하기
### 버전 컨트롤 시스템 이용하기
